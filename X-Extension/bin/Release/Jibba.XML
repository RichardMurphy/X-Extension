<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jibba</name>
    </assembly>
    <members>
        <member name="T:Jibba.XApp">
            <summary>
            Provides ways to control apps
            </summary>
        </member>
        <member name="M:Jibba.XApp.StartProcess(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Starts a process
            </summary>
            <param name="fileName">The full file path of the program to start</param> 
            <returns>The name of the process</returns>
            <example>XApp.StartProcess("C:\Programs\MyApp.exe")</example>       
        </member>
        <member name="M:Jibba.XApp.StartWithStartInfo(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
             <summary>
             Starts a process with start info
             </summary>
             <param name="fileName">The full file path of the program to start</param>
             <param name="windowStyle">Specify the window style as hidden, maximized or minimized.
             Use "" to specify normal.</param>
             <param name="args">Specify arguments for the process. Use "" to specify nothing.</param>
            <returns>The name of the process.</returns>
             <example>XApp.StartWithStartInfo("IExplore.exe", "maximized", "www.getjibba.com")</example>
        </member>
        <member name="M:Jibba.XApp.GetAllProcesses(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets all the processes currently running on the PC
            </summary> 
            <param name="machineName">Specify the name of the PC</param> 
            <returns>an array</returns>
            <example>XApp.GetAllProcesses(XApp.MachineName)</example>     
        </member>
        <member name="M:Jibba.XApp.Kill(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Kills a process
            </summary>
            <param name="process">The name of the process</param> 
            <example>XApp.Kill("MyProgram")</example>       
        </member>
        <member name="P:Jibba.XApp.MachineName">
            <summary>
            Gets the machine name of this local computer
            </summary> 
            <example>thisMachineName = XApp.MachineName</example>      
        </member>
        <member name="T:Jibba.XEnvironment">
            <summary>
            Provides some Environment properties and methods
            </summary>
        </member>
        <member name="P:Jibba.XEnvironment.NewLine">
            <summary>
            Gets the newline character for the current environment
            </summary>
            <returns>a newline</returns>
        </member>
        <member name="P:Jibba.XEnvironment.UserName">
            <summary>
            Gets the Users name for the current environment
            </summary>
            <returns>Users name</returns>
        </member>
        <member name="T:Jibba.XLeadersBoard">
            <summary>
            provides some SQLite resources to create leader boards. Each board is a unique table in one large shared database.
            </summary>
        </member>
        <member name="M:Jibba.XLeadersBoard.CreateTable(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Creates a table (aka leaders board) of the name (no spaces) you specify if it doesn't already exist
            </summary>
            <param name="tableName">Unique Game name (no spaces). Include the programmers name (or PIN) here as well to avoid any overwrites</param>
            <returns></returns>
            <example>XLeadersBoard.CreateTable("SolitaireByJibba")</example>
        </member>
        <member name="M:Jibba.XLeadersBoard.AddRecord(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Adds a record to the specified table (aka leaders board). The dateTime will be automatically added.
            Do this once per session at the start of the game. Then use XLeadersBoard.UpdateRecord() to update this record during the session.
            </summary>
            <param name="tableName">The game name used when the table was created. String</param>
            <param name="player">Players name. String</param>
            <param name="score">Game score. Integer</param>
            <param name="time">How long it took to get that score. Integer</param>
            <returns>DateTime added. Use this value as an ID for this session when updating the score with UpdateRecord().</returns>
            <example>XLeadersBoard.AddRecord("SolitaireByJibba", "Jack", 0, 0)</example>
        </member>
        <member name="M:Jibba.XLeadersBoard.GetAllRecords(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets all the records sorted by score, time and player in DESC, ASC and ASC order repectively
            </summary>
            <param name="tableName">The game name used when the board was created</param>
            <returns>A sorted CSV table of all the records for the game</returns>
            <example>XLeadersBoard.GetAllRecords("SolitaireByJibba")</example>
        </member>
        <member name="M:Jibba.XLeadersBoard.UpdateRecord(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Updates the record for this session
            </summary>
            <param name="tableName">The game name used when the board was created</param>
            <param name="player">Players name (can be "")</param>
            <param name="dateRef">The dateTime value that was returned by dateRef = XLeadersBoard.AddRecord(...)</param>
            <param name="score">Game score. Integer</param>
            <param name="time">How long it took to get that score. Integer</param>
            <example>XLeadersBoard.UpdateRecord("SolitaireByJibba", "Jack", dateRef, 100, 750)</example>
        </member>
        <member name="M:Jibba.XLeadersBoard.GetLeaders(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets a limited number of records sorted by score, time and player in DESC, ASC and ASC order repectively
            </summary>
            <param name="tableName">The game name used when the board was created</param>
            <param name="limit">Limit how many records to show. Integer</param>
            <returns>A sorted CSV table of the records up to the limit</returns>
            <example>XLeadersBoard.GetLeaders("SolitaireByJibba", 10)</example>
        </member>
        <member name="T:Jibba.XMath">
            <summary>
            The XMath object provides extra mathematical tools
            </summary>
        </member>
        <member name="M:Jibba.XMath.PrimeNumbers(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets all prime numbers for a given range
            </summary>
            <param name="from">The integer to start from</param>
            <param name="to">The integer to finish at</param>        
            <returns>CSV of all primes within the range.
            
            Throws an exception if 'to &lt; from' or 'to &lt; 2'.
            
            Will be slower for very large ranges. Less than 2 seconds for 0 to 1,000,000 when written to file.
            </returns>        
            <example>File.WriteContents(filePath, XMath.PrimeNumbers(0, 1000000))</example>
        </member>
        <member name="M:Jibba.XMath.PrimeFactors(Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the prime factor(s) for a given value
            </summary>
            <param name="value">Any positive integer &gt; 1 and &lt; 9,223,372,036,854,775,807
            MUST be a numerical string.</param>
            <returns>The prime factors as CSV
            
            Will be slower for some very large numbers. Less than 1 minute for 9,223,372,036,854,775,806.
            </returns>
            <example>XMath.PrimeFactors("9223372036854775806")
            OR
            XMath.PrimeFactors(Controls.GetTextBoxText(txtBox))
            </example>
        </member>
        <member name="M:Jibba.XMath.GreatestCommonDivisor(Microsoft.SmallBasic.Library.Primitive,Microsoft.SmallBasic.Library.Primitive)">
            <summary>
            Gets the Greatest Common Divisor for 2 integers
            </summary>
            <param name="valueOne">Any integer</param>
            <param name="valueTwo">Any integer</param>
            <returns>The greatest common divisor</returns>
            <example>XMath.GreatestCommonDivisor(15, 2565)</example>
        </member>
    </members>
</doc>
